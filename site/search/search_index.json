{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcda Documenta\u00e7\u00e3o T\u00e9cnica do PetCare Agendamento","text":""},{"location":"#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O PetCare Agendamento \u00e9 uma plataforma web desenvolvida para simplificar o agendamento de servi\u00e7os veterin\u00e1rios em domic\u00edlio (banho, tosa, curativos etc.). O sistema, constru\u00eddo em Python (Django), \u00e9 focado em seguran\u00e7a, performance e uma excelente experi\u00eancia de usu\u00e1rio.</p> <p>O principal diferencial da aplica\u00e7\u00e3o \u00e9 sua Camada de Servi\u00e7os test\u00e1vel, que gerencia a l\u00f3gica complexa de agendamento, como c\u00e1lculo din\u00e2mico de dura\u00e7\u00e3o de servi\u00e7os e checagem de conflitos de hor\u00e1rio em tempo real.</p>"},{"location":"#indice-da-documentacao","title":"\u00cdndice da Documenta\u00e7\u00e3o","text":"Se\u00e7\u00e3o Conte\u00fado Principal Setup e Instala\u00e7\u00e3o Pr\u00e9-requisitos, instru\u00e7\u00f5es de instala\u00e7\u00e3o local e vari\u00e1veis de ambiente. Arquitetura do Sistema Modelos de dados (ERD), diagramas de fluxo (CRUD, Autentica\u00e7\u00e3o) e estrutura de diret\u00f3rios. APIs e Endpoints Defini\u00e7\u00e3o de endpoints REST (potenciais) e estrutura de dados. Seguran\u00e7a e Autentica\u00e7\u00e3o Guidelines de autentica\u00e7\u00e3o, gerenciamento de segredos e pr\u00e1ticas de deploy seguro. Qualidade e Padr\u00f5es Guidelines de c\u00f3digo, padr\u00f5es de commit, processos de desenvolvimento e testes."},{"location":"#tecnologias-principais","title":"\ud83d\udee0\ufe0f Tecnologias Principais","text":"Categoria Tecnologia Backend Python 3.10+, Django 5.x, Gunicorn Banco de Dados PostgreSQL (Produ\u00e7\u00e3o), SQLite3 (Desenvolvimento) Frontend HTML5, CSS3 (Bootstrap 5), JavaScript (jQuery e Vanilla JS) Infraestrutura Docker, Render (PaaS), WhiteNoise"},{"location":"architecture/","title":"Vis\u00e3o Geral","text":""},{"location":"architecture/#3-docsarchitecturemd-arquitetura-modelagem-e-endpoints","title":"3. <code>docs/architecture.md</code> (Arquitetura, Modelagem e Endpoints)","text":"<p>Este arquivo detalha a Estrutura, Modelagem de Dados, Arquitetura e Endpoints API.</p> <pre><code># \ud83d\udcd0 Arquitetura do Sistema e Modelagem\n\n## 1. Estrutura do Projeto (Diret\u00f3rios e Arquivos)\n\nA estrutura segue o padr\u00e3o Django, com a aplica\u00e7\u00e3o principal (`agendamentos`) isolada e focada em Domain-Driven Design (DDD), separando a l\u00f3gica de neg\u00f3cio na camada de servi\u00e7os.\n\n```text\nagendamento/\n\u251c\u2500\u2500 agendamento/        # Configura\u00e7\u00e3o do Projeto Django (settings, urls)\n\u2502   \u251c\u2500\u2500 settings.py     # Configura\u00e7\u00f5es com python-decouple e settings de produ\u00e7\u00e3o/Docker.\n\u2502   \u2514\u2500\u2500 urls.py         # URLs principais\n\u251c\u2500\u2500 agendamentos/       # Aplica\u00e7\u00e3o Principal (Domain)\n\u2502   \u251c\u2500\u2500 models.py       # Defini\u00e7\u00e3o dos modelos de dados.\n\u2502   \u251c\u2500\u2500 forms.py        # Customiza\u00e7\u00e3o de formul\u00e1rios (Autentica\u00e7\u00e3o, Agendamento).\n\u2502   \u251c\u2500\u2500 services.py     # \ud83d\udea8 Camada de Servi\u00e7os: L\u00f3gica de neg\u00f3cio cr\u00edtica (conflito, dura\u00e7\u00e3o).\n\u2502   \u251c\u2500\u2500 views.py        # Camada de Apresenta\u00e7\u00e3o e requisi\u00e7\u00f5es.\n\u2502   \u251c\u2500\u2500 tests.py        # Testes de Unidade para a camada de servi\u00e7os.\n\u2502   \u2514\u2500\u2500 templates/      # Templates HTML.\n\u251c\u2500\u2500 docs/               # Documenta\u00e7\u00e3o T\u00e9cnica do Projeto (este diret\u00f3rio).\n\u251c\u2500\u2500 venv/\n\u251c\u2500\u2500 Dockerfile          # Instru\u00e7\u00f5es de Build do Container.\n\u251c\u2500\u2500 docker-compose.yml  # Configura\u00e7\u00e3o local (Django + PostgreSQL).\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"architecture/#2-modelos-de-dados-erd-simplificado","title":"2. Modelos de Dados (ERD Simplificado)","text":"<p>O diagrama abaixo representa as rela\u00e7\u00f5es cr\u00edticas para o sistema de agendamento.</p> <p>```mermaid erDiagram     USUARIO ||--o{ PERFIL_USUARIO : \"tem um\"     USUARIO ||--o{ PET : \"\u00e9 dono de\"     PET ||--o{ AGENDAMENTO : \"pertence a\"     AGENDAMENTO ||--o{ PERFIL_USUARIO : \"criado por\"     AGENDAMENTO }o--o{ SERVICO : \"cont\u00e9m\"</p> <pre><code>USUARIO {\n    int id PK\n    varchar username\n    varchar email\n}\nPERFIL_USUARIO {\n    int id PK\n    int usuario_id FK\n    varchar cpf\n    date data_nascimento\n}\nPET {\n    int id PK\n    int dono_id FK\n    varchar nome\n    varchar tipo\n }\nSERVICO {\n    int id PK\n    varchar nome\n    int duracao_minutos\n    decimal preco\n}\nAGENDAMENTO {\n    int id PK\n    int tutor_id FK\n    int pet_id FK\n    date data\n    time horario_inicio\n    decimal valor_total\n    varchar endereco\n}\n```\n</code></pre>"},{"location":"architecture/#3-arquitetura-do-sistema-fluxo-de-dados","title":"3. Arquitetura do Sistema (Fluxo de Dados)","text":"<p>O diagrama ilustra a separa\u00e7\u00e3o de responsabilidades (SoC) com a Camada de Servi\u00e7os isolada. ```mermaid graph TD     A[Usu\u00e1rio/Cliente] --&gt; B(Requisi\u00e7\u00e3o HTTP);     B --&gt; C{Django: URLs};     C --&gt; D[Views.py];     D -- Dados/Regras --&gt; E[Services.py: L\u00f3gica de Neg\u00f3cio];     E -- Valida\u00e7\u00e3o/Consultas --&gt; F[Models.py / Banco de Dados];     F --&gt; E;     E -- Resultado --&gt; D;     D -- Renderiza\u00e7\u00e3o --&gt; G[Templates/Mensagens];     G --&gt; A;</p> <pre><code>subgraph Backend\n    C\n    D\n    E\n    F\nend\n```\n</code></pre>"},{"location":"architecture/#4-fluxos-criticos-do-sistema","title":"4. Fluxos Cr\u00edticos do Sistema","text":""},{"location":"architecture/#41-fluxo-de-agendamento-crud","title":"4.1. Fluxo de Agendamento (CRUD)","text":"<p><code>mermaid flowchart TD     A[In\u00edcio: Formul\u00e1rio de Agendamento] --&gt; B{POST: views.agendar_servico};     B --&gt; C[Forms.py: Valida\u00e7\u00e3o de Dados];     C -- Dados V\u00e1lidos --&gt; D[Services.py: Checar Conflito e Dura\u00e7\u00e3o];     D -- Conflito Encontrado --&gt; E[Views: messages.error('Conflito')]     D -- Slot Livre --&gt; F[Services.py: Criar Agendamento]     F --&gt; G[Models.py: Salvar no DB]     G --&gt; H[Views: messages.success('Agendado')]     H --&gt; I[Redirecionar para Meus Agendamentos]     E --&gt; B;</code></p>"},{"location":"architecture/#42-fluxo-de-autenticacao-login","title":"4.2. Fluxo de Autentica\u00e7\u00e3o (Login)","text":"<p><code>mermaid flowchart TD     A[Tela de Login] --&gt; B{POST: forms.CustomAuthenticationForm};     B -- Credenciais --&gt; C[Django Auth Backend];     C -- Falha na Autentica\u00e7\u00e3o --&gt; D[Forms: erro 'Usu\u00e1rio/Senha inv\u00e1lido'];     D --&gt; A;     C -- Sucesso --&gt; E[Views: login(user)];     E --&gt; F[Redirecionamento P\u00f3s-Login];</code></p>"},{"location":"guidelines/","title":"\ud83d\ude80 Guidelines, Testes e Contribui\u00e7\u00f5es","text":""},{"location":"guidelines/#1-guidelines-e-padroes-de-codigo","title":"1. Guidelines e Padr\u00f5es de C\u00f3digo","text":""},{"location":"guidelines/#11-padroes-de-commit-conventional-commits","title":"1.1. Padr\u00f5es de Commit (Conventional Commits)","text":"<p>Os commits devem seguir o padr\u00e3o <code>type(scope): message</code> para manter um hist\u00f3rico claro e automatiz\u00e1vel.</p> <ul> <li><code>feat</code>: Adiciona um novo recurso (ex: <code>feat(api): Adiciona endpoint de usu\u00e1rios</code>).</li> <li><code>fix</code>: Corrige um bug (ex: <code>fix(auth): Corrige falha no redirecionamento p\u00f3s-login</code>).</li> <li><code>chore</code>: Mudan\u00e7as em builds, depend\u00eancias, configs (ex: <code>chore(deps): Atualiza Django para 5.0.5</code>).</li> <li><code>docs</code>: Mudan\u00e7as na documenta\u00e7\u00e3o.</li> <li><code>refactor</code>: Refatora\u00e7\u00e3o que n\u00e3o corrige bug nem adiciona funcionalidade.</li> </ul>"},{"location":"guidelines/#12-padrao-de-arquitetura","title":"1.2. Padr\u00e3o de Arquitetura","text":"<ul> <li>L\u00f3gica de neg\u00f3cio complexa deve ser isolada em <code>services.py</code>.</li> <li>Views devem ser leves, focadas em I/O e renderiza\u00e7\u00e3o.</li> </ul>"},{"location":"guidelines/#2-desenvolvimento-e-testes","title":"2. Desenvolvimento e Testes","text":""},{"location":"guidelines/#21-testes-de-unidade","title":"2.1. Testes de Unidade","text":"<p>A cobertura de testes \u00e9 focada na Camada de Servi\u00e7os (<code>services.py</code>).</p> <p>Para rodar os testes: <pre><code>python manage.py test agendamentos\n</code></pre> Foco: Garantir que as regras de neg\u00f3cio cr\u00edticas (conflito de hor\u00e1rio, dura\u00e7\u00e3o, hor\u00e1rios de almo\u00e7o) funcionem 100% do tempo.</p>"},{"location":"guidelines/#22-docker-para-desenvolvimento","title":"2.2. Docker para Desenvolvimento","text":"<p>Utilize o docker-compose.yml para rodar o ambiente com PostgreSQL localmente, replicando o ambiente de produ\u00e7\u00e3o. <pre><code>docker-compose up --build\n</code></pre></p>"},{"location":"guidelines/#3-contribuicoes","title":"3. Contribui\u00e7\u00f5es","text":"<p>Contribui\u00e7\u00f5es s\u00e3o bem-vindas! Siga o processo de Pull Request (PR):</p> <p>Crie um fork do projeto.</p> <p>Crie uma branch com o nome descritivo (ex: feat/adicionar-relatorio ou fix/corrigir-bug-cep).</p> <p>Implemente suas altera\u00e7\u00f5es, seguindo os Guidelines acima.</p> <p>Crie um Pull Request para a branch main.</p>"},{"location":"guidelines/#4-release-notes","title":"4. Release Notes","text":"<p>Detalhes sobre as vers\u00f5es e as principais mudan\u00e7as.</p> <p>v1.1.0 - Refatora\u00e7\u00e3o e Qualidade (Pr\u00f3xima Vers\u00e3o) feat: Implementa\u00e7\u00e3o da Camada de Servi\u00e7os para Agendamento.</p> <p>fix: Corre\u00e7\u00e3o de erro de digita\u00e7\u00e3o no test suite que impedia a execu\u00e7\u00e3o.</p> <p>chore: Mapeamento de tags de mensagem Django para classes Bootstrap.</p> <p>feat: Dockeriza\u00e7\u00e3o completa do projeto para portabilidade.</p> <p>v1.0.0 - Lan\u00e7amento Inicial Lan\u00e7amento da funcionalidade b\u00e1sica de CRUD de Agendamentos e Pets.</p> <p>Integra\u00e7\u00e3o com Bootstrap 5 e Jazzmin Admin.</p> <p>Funcionalidade de preenchimento autom\u00e1tico de endere\u00e7o ViaCEP.</p>"},{"location":"security/","title":"\ud83d\udd12 Autentica\u00e7\u00e3o e Seguran\u00e7a","text":"<p>O projeto prioriza a seguran\u00e7a, seguindo as melhores pr\u00e1ticas do Django para prote\u00e7\u00e3o de dados e deploy em produ\u00e7\u00e3o.</p>"},{"location":"security/#1-autenticacao","title":"1. Autentica\u00e7\u00e3o","text":""},{"location":"security/#11-formularios-customizados","title":"1.1. Formul\u00e1rios Customizados","text":"<ul> <li>A autentica\u00e7\u00e3o utiliza <code>CustomAuthenticationForm</code> (<code>agendamentos/forms.py</code>).</li> <li>Seguran\u00e7a de Login (UX): A mensagem de erro de falha de login \u00e9 gen\u00e9rica e customizada (\"Usu\u00e1rio ou senha inv\u00e1lido\"), mitigando ataques de enumera\u00e7\u00e3o de usu\u00e1rios.</li> </ul>"},{"location":"security/#12-gerenciamento-de-senhas","title":"1.2. Gerenciamento de Senhas","text":"<p>O Django utiliza o padr\u00e3o PBKDF2 (Password-Based Key Derivation Function 2) com salting para o hash de senhas.</p>"},{"location":"security/#2-padroes-de-seguranca-no-deploy","title":"2. Padr\u00f5es de Seguran\u00e7a no Deploy","text":""},{"location":"security/#21-gerenciamento-de-segredos-python-decouple","title":"2.1. Gerenciamento de Segredos (<code>python-decouple</code>)","text":"<p>Todos os segredos cr\u00edticos (<code>SECRET_KEY</code>, <code>DATABASE_URL</code>) s\u00e3o lidos de vari\u00e1veis de ambiente.</p>"},{"location":"security/#22-configuracoes-de-https-e-hsts","title":"2.2. Configura\u00e7\u00f5es de HTTPS e HSTS","text":"<p>As seguintes configura\u00e7\u00f5es no <code>settings.py</code> s\u00e3o ativas em ambiente de produ\u00e7\u00e3o (<code>DEBUG=False</code>):</p> <ul> <li>For\u00e7ar HTTPS: <code>SECURE_SSL_REDIRECT = True</code></li> <li>Cookies Seguros: <code>CSRF_COOKIE_SECURE = True</code> e <code>SESSION_COOKIE_SECURE = True</code></li> <li>HSTS: Configurado com <code>SECURE_HSTS_SECONDS = 31536000</code> (1 ano) para for\u00e7ar o navegador a usar HTTPS em acessos futuros.</li> </ul>"},{"location":"security/#23-host-header-protection","title":"2.3. Host Header Protection","text":"<p>A lista <code>ALLOWED_HOSTS</code> \u00e9 estritamente configurada (via vari\u00e1veis de ambiente) para aceitar apenas os dom\u00ednios de produ\u00e7\u00e3o, prevenindo ataques de Host Header Spoofing.</p>"},{"location":"security/#3-fluxo-de-seguranca-exemplo-de-protecao-de-dados","title":"3. Fluxo de Seguran\u00e7a (Exemplo de Prote\u00e7\u00e3o de Dados)","text":"<p>O diagrama ilustra como os segredos s\u00e3o lidos no ambiente de produ\u00e7\u00e3o (Render).</p> <p>```mermaid flowchart LR     A[Vari\u00e1veis de Ambiente (Render)] --&gt; B(settings.py);     subgraph C\u00f3digo Django         B --&gt; C{python-decouple};         C --&gt; D[Chaves como SECRET_KEY];     end     D --&gt; E[Execu\u00e7\u00e3o da Aplica\u00e7\u00e3o];</p>"},{"location":"setup/","title":"\u2699\ufe0f Setup e Configura\u00e7\u00e3o do Ambiente","text":"<p>Este guia detalha como configurar e rodar o projeto localmente.</p>"},{"location":"setup/#1-pre-requisitos","title":"1. Pr\u00e9-requisitos","text":"<p>Certifique-se de ter instalado em seu ambiente: * Python 3.10+ * Git * Docker e Docker Compose (Opcional, mas altamente recomendado para desenvolvimento com PostgreSQL).</p>"},{"location":"setup/#2-instalacao-local","title":"2. Instala\u00e7\u00e3o Local","text":"<p>Siga estes passos para configurar e iniciar o projeto:</p>"},{"location":"setup/#21-clonagem-e-ambiente-virtual","title":"2.1. Clonagem e Ambiente Virtual","text":"<pre><code># Clone o reposit\u00f3rio\ngit clone [https://github.com/JackssonDev/agendamento](https://github.com/JackssonDev/agendamento)\ncd agendamento\n\n# Crie e ative o ambiente virtual\npython3 -m venv venv\nsource venv/bin/activate # Use 'venv\\Scripts\\activate' no Windows\n\n# Instale as depend\u00eancias\npip install -r requirements.txt\n</code></pre>"},{"location":"setup/#22-configuracao-de-variaveis-de-ambiente","title":"2.2. Configura\u00e7\u00e3o de Vari\u00e1veis de Ambiente","text":"<p>Crie um arquivo chamado .env na raiz do projeto. Utilize a biblioteca python-decouple para gerenciar as configura\u00e7\u00f5es. <pre><code># .env (Ambiente de Desenvolvimento)\n\n# Seguran\u00e7a\nSECRET_KEY='chave_local_de_desenvolvimento'\nDEBUG=True\nALLOWED_HOSTS='127.0.0.1,localhost'\n\n# Banco de Dados (SQLite)\n# DATABASE_URL \u00e9 opcional, pois o settings.py usa SQLite por padr\u00e3o se vazio.\n# DATABASE_URL=\n\n# Configura\u00e7\u00f5es do Email (se aplic\u00e1vel)\nEMAIL_HOST=\nEMAIL_PORT=\n</code></pre></p>"},{"location":"setup/#23-inicializacao-e-migracoes","title":"2.3. Inicializa\u00e7\u00e3o e Migra\u00e7\u00f5es","text":"<pre><code># Aplique as migra\u00e7\u00f5es (cria o banco de dados SQLite)\npython manage.py migrate\n\n# Coleta de arquivos est\u00e1ticos (\u00fatil para desenvolvimento)\npython manage.py collectstatic --noinput\n\n# Crie um superusu\u00e1rio para acessar a \u00e1rea administrativa (Jazzmin)\npython manage.py createsuperuser\n</code></pre>"},{"location":"setup/#24-iniciando-o-servidor","title":"2.4. Iniciando o Servidor","text":"<p><pre><code>python manage.py runserver\n</code></pre> Acesse o projeto em http://127.0.0.1:8000/</p>"}]}